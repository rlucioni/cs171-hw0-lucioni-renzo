// Generated by CoffeeScript 1.7.1

/* Mike Bostock's margin convention */
var canvasHeight, canvasWidth, dataset, margin, sortBars, sortOrder, svg, xScale, yScale;

margin = {
  top: 10,
  right: 10,
  bottom: 10,
  left: 10
};

canvasWidth = 600 - margin.left - margin.right;

canvasHeight = 250 - margin.top - margin.bottom;


/* create shifted SVG element */

svg = d3.select("body").append("svg").attr("width", canvasWidth + margin.left + margin.right).attr("height", canvasHeight + margin.top + margin.bottom).append("g").attr("transform", "translate(" + margin.left + ", " + margin.top + ")");

dataset = [5, 10, 13, 19, 21, 25, 22, 18, 15, 13, 11, 12, 15, 20, 18, 17, 16, 18, 23, 25];

xScale = d3.scale.ordinal().domain(d3.range(dataset.length)).rangeRoundBands([0, canvasWidth], 0.05);

yScale = d3.scale.linear().domain([0, d3.max(dataset)]).range([0, canvasHeight]);


/* create bars */

svg.selectAll("rect").data(dataset).enter().append("rect").attr({
  "x": function(d, i) {
    return xScale(i);
  },
  "y": function(d) {
    return canvasHeight - yScale(d);
  },
  "width": xScale.rangeBand(),
  "height": function(d) {
    return yScale(d);
  },
  fill: function(d) {
    return "rgb(127, 201, " + (d * 10) + ")";
  }
}).on("click", function() {
  return sortBars();
});


/* create labels */

svg.selectAll("text").data(dataset).enter().append("text").text(function(d) {
  return d;
}).attr({
  x: function(d, i) {
    return xScale(i) + xScale.rangeBand() / 2;
  },
  y: function(d) {
    return canvasHeight - yScale(d) + 14;
  },
  "font-family": "sans-serif",
  "font-size": "11px",
  fill: "white",
  "text-anchor": "middle"
});

sortOrder = false;

sortBars = function() {
  sortOrder = !sortOrder;
  svg.selectAll("rect").sort(function(a, b) {
    if (sortOrder) {
      return d3.ascending(a, b);
    } else {
      return d3.descending(a, b);
    }
  }).transition().delay(function(d, i) {
    return i * 50;
  }).duration(1000).attr("x", function(d, i) {
    return xScale(i);
  });
  return svg.selectAll("text").sort(function(a, b) {
    if (sortOrder) {
      return d3.ascending(a, b);
    } else {
      return d3.descending(a, b);
    }
  }).transition().delay(function(d, i) {
    return i * 50;
  }).duration(1000).attr("x", function(d, i) {
    return xScale(i) + xScale.rangeBand() / 2;
  });
};
