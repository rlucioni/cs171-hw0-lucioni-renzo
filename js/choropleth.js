// Generated by CoffeeScript 1.7.1

/* Mike Bostock's margin convention */
var canvasHeight, canvasWidth, colors, margin, path, projection, svg;

margin = {
  top: 10,
  right: 10,
  bottom: 10,
  left: 10
};

canvasWidth = 600 - margin.left - margin.right;

canvasHeight = 400 - margin.top - margin.bottom;


/* create shifted SVG element */

svg = d3.select("body").append("svg").attr("width", canvasWidth + margin.left + margin.right).attr("height", canvasHeight + margin.top + margin.bottom).append("g").attr("transform", "translate(" + margin.left + ", " + margin.top + ")");

projection = d3.geo.albersUsa().translate([canvasWidth / 2, canvasHeight / 2]).scale([500]);

path = d3.geo.path().projection(projection);

colors = d3.scale.quantize().range(colorbrewer.YlGn[5]);

d3.csv("us-ag-productivity-2004.csv", function(data) {
  colors.domain([
    d3.min(data, function(d) {
      return d.value;
    }), d3.max(data, function(d) {
      return d.value;
    })
  ]);
  return d3.json("us-states.json", function(json) {
    var dataState, dataValue, el, entry, jsonState, _i, _j, _len, _len1, _ref;
    for (_i = 0, _len = data.length; _i < _len; _i++) {
      entry = data[_i];
      dataState = entry.state;
      dataValue = +entry.value;
      _ref = json.features;
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        el = _ref[_j];
        jsonState = el.properties.name;
        if (dataState === jsonState) {
          el.properties.value = dataValue;
          break;
        }
      }
    }
    svg.selectAll("path").data(json.features).enter().append("path").attr("d", path).style("fill", function(d) {
      var value;
      value = d.properties.value;
      if (value) {
        return colors(value);
      } else {
        return "#ccc";
      }
    });
    return d3.csv("us-cities.csv", function(data) {
      return svg.selectAll("circle").data(data).enter().append("circle").attr("cx", function(d) {
        return projection([d.lon, d.lat])[0];
      }).attr("cy", function(d) {
        return projection([d.lon, d.lat])[1];
      }).attr("r", function(d) {
        return Math.sqrt(+d.population * 0.00004);
      }).style("fill", "blue").style("opacity", 0.75);
    });
  });
});
